{"version":3,"sources":["components/ShowSpinner/Loading_icon.gif","components/ShowSpinner/ShowSpinner.jsx","components/CreatePost/CreatePost.jsx","components/Main/Main.jsx","hooks/useJsonFetch.js","components/NewPost/NewPost.jsx","components/EditPost/EditPost.jsx","components/SelectedPost/SelectedPost.jsx","components/Page404/Page404.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","styled","img","ShowSpinner","src","spinner","alt","Element","div","CreatePost","to","ul","Post","li","PostName","PostContent","p","Main","url","options","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","response","status","Error","statusText","ok","json","getData","useJsonFetch","process","onClick","event","localStorage","setItem","target","closest","dataset","message","map","id","data-data","JSON","stringify","avatar","name","moment","created","fromNow","content","TextArea","textarea","NewPost","useRef","uploadPost","method","body","current","value","console","focus","className","ref","rows","preventDefault","classList","contains","add","ButtonClose","button","EditPost","props","setContent","onClose","onChange","Controls","ButtonEdit","SelectedPost","editMode","setEditMode","onToggleEditMode","post","parse","getItem","onDelete","Page404","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,MAA0B,yC,OCInCA,EAAUC,IAAOC,IAAV,+DAKE,SAASC,IACtB,OAAO,cAACH,EAAD,CAASI,IAAKC,EAASC,IAAI,Y,2DCN9BC,EAAUN,IAAOO,IAAV,wWAkBE,SAASC,IACtB,OACE,cAACF,EAAD,UACE,cAAC,IAAD,CAAMG,GAAG,OAAT,mFCjBN,I,IAAMH,EAAUN,IAAOU,GAAV,qKAWPC,EAAOX,IAAOY,GAAV,yNAaJC,EAAWb,IAAOO,IAAV,4CAGRO,EAAcd,IAAOe,EAAV,mOAcF,SAASC,IAAQ,IAAD,EC/ChB,SAAsBC,EAAKC,GAAU,IAAD,EACzBC,mBAAS,IADgB,mBAC1CC,EAD0C,KACpCC,EADoC,OAEvBF,mBAAS,IAFc,mBAE1CG,EAF0C,KAEnCC,EAFmC,OAGnBJ,oBAAS,GAHU,mBAG1CK,EAH0C,KAGjCC,EAHiC,KAsCjD,OAjCAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,6DACdF,GAAW,GACXF,EAAS,IAFK,kBAKWK,MAAMX,EAAKC,GALtB,UAOY,OAFlBW,EALM,QAOCC,OAPD,sBAQJ,IAAIC,MACR,kBAAoBF,EAASC,OAAS,MAAQD,EAASG,YAT/C,WAaRH,EAASI,GAbD,kCAcSJ,EAASK,OAdlB,WAcJA,EAdI,8BAiBF,IAAIH,MAAM,iBAjBR,QAmBVV,EAAQa,GAnBE,0DAsBZX,EAAS,EAAD,IACRF,EAAQ,IAvBI,yBAyBZI,GAAW,GAzBC,6EAAH,oDA6BbU,KACC,CAACjB,EAASD,IAEN,CAACO,EAASF,EAAOF,GDUOgB,CAAaC,8CADf,mBACtBb,EADsB,KACbF,EADa,KACNF,EADM,KAGvBkB,EAAU,SAACC,GACfC,aAAaC,QAAQ,eAAgBF,EAAMG,OAAOC,QAAQ,KAAKC,QAAQxB,OAGzE,OACE,gCACE,cAACZ,EAAD,IACCgB,GAAW,cAACtB,EAAD,IACXoB,GAAS,8BAAMA,EAAMuB,UACrBzB,GACC,cAAC,EAAD,UACGA,EAAK0B,KAAI,SAAC1B,GAAD,OACR,cAAC,IAAD,CACEX,GAAE,iBAAYW,EAAK2B,IAEnBC,YAAWC,KAAKC,UAAU9B,GAC1BkB,QAASA,EAJX,SAME,eAAC3B,EAAD,WACE,qBAAKR,IAAKiB,EAAK+B,OAAQ9C,IAAKe,EAAKgC,OACjC,cAACvC,EAAD,UAAWO,EAAKgC,OAChB,+BAAOC,IAAOjC,EAAKkC,SAASC,YAC5B,cAACzC,EAAD,UAAcM,EAAKoC,cARhBpC,EAAK2B,YE9DxB,IAAMpC,EAAOX,IAAOO,IAAV,0oBAkCJkD,EAAWzD,IAAO0D,SAAV,8LAUC,SAASC,IACtB,IAAMD,EAAWE,iBAAO,MAelBC,EAAU,uCAAG,4BAAAlC,EAAA,+EAEQC,MAAMS,6CAAiC,CAC5DyB,OAAQ,OACR,eAAgB,mBAChBC,KAAMd,KAAKC,UAAU,CAAEH,GAAI,EAAGS,QAASE,EAASM,QAAQC,UAL3C,WAETpC,EAFS,QAQDI,GARC,sBASP,IAAIF,MAAMF,EAASG,YATZ,uDAYfkC,QAAQ5C,MAAR,MAZe,yDAAH,qDAoBhB,OAJAI,qBAAU,WACRgC,EAASM,QAAQG,UAChB,IAGD,eAAC,EAAD,WACE,cAAC,IAAD,CAAM1D,GAAG,IAAI2D,UAAU,QAAvB,eAGA,cAACX,EAAD,CAAUY,IAAKX,EAAUY,KAAK,OAC9B,cAAC,IAAD,CAAM7D,GAAG,IAAI6B,QAvCD,SAACC,GACVmB,EAASM,QAAQC,QACpB1B,EAAMgC,iBAEDb,EAASM,QAAQQ,UAAUC,SAAS,UAM3CZ,IALIH,EAASM,QAAQQ,UAAUE,IAAI,UAkCjC,yF,4BCtFA/D,EAAOX,IAAOO,IAAV,0oBAkCJkD,EAAWzD,IAAO0D,SAAV,8LASRiB,EAAc3E,IAAO4E,OAAV,sNAYF,SAASC,EAASC,GAC/B,IAAMpB,EAAWE,iBAAO,MADc,EAGRzC,mBAAS2D,EAAMtB,SAHP,mBAG/BA,EAH+B,KAGtBuB,EAHsB,KAsBhClB,EAAU,uCAAG,4BAAAlC,EAAA,+EAEQC,MAAMS,6CAAiC,CAC5DyB,OAAQ,OACR,eAAgB,mBAChBC,KAAMd,KAAKC,UAAU,CAAEH,GAAI+B,EAAM/B,GAAIS,QAASA,MALjC,WAET3B,EAFS,QAQDI,GARC,sBASP,IAAIF,MAAMF,EAASG,YATZ,uDAYfkC,QAAQ5C,MAAR,MAZe,yDAAH,qDAoBhB,OACE,eAAC,EAAD,WACE,yIACA,cAACqD,EAAD,CAAarC,QAPD,WACdwC,EAAME,WAMJ,eACA,cAAC,EAAD,CACEX,IAAKX,EACLY,KAAK,KACLL,MAAOT,EACPyB,SA7CiB,SAAC1C,GACtBwC,EAAWxC,EAAMG,OAAOuB,UA8CtB,cAAC,IAAD,CAAMxD,GAAG,IAAI6B,QA3CD,SAACC,GACVmB,EAASM,QAAQC,QACpB1B,EAAMgC,iBAEDb,EAASM,QAAQQ,UAAUC,SAAS,UAM3CZ,IALIH,EAASM,QAAQQ,UAAUE,IAAI,UAsCjC,uECzGN,I,EAAM/D,EAAOX,IAAOY,GAAV,yNAaJsE,GAAWlF,IAAOO,IAAV,oQAcRM,GAAWb,IAAOO,IAAV,4CAGRO,GAAcd,IAAOe,EAAV,mOAaXoE,GAAanF,IAAO4E,OAAV,kKASD,SAASQ,GAAaN,GAAQ,IAAD,EACV3D,oBAAS,GADC,mBACnCkE,EADmC,KACzBC,EADyB,KAGpCC,EAAmB,WACvBD,GAAaD,IAGTG,EAAOvC,KAAKwC,MAAMjD,aAAakD,QAAQ,iBAEvCC,EAAQ,uCAAG,WAAOpD,GAAP,eAAAZ,EAAA,+EAEUC,MAAM,GAAD,OACvBS,6CADuB,YACYE,EAAMG,OAAOK,IACnD,CACEe,OAAQ,WALC,WAEPjC,EAFO,QASCI,GATD,sBAUL,IAAIF,MAAMF,EAASG,YAVd,uDAabkC,QAAQ5C,MAAR,MAba,yDAAH,sDAiBd,OAAI+D,EAEA,cAACR,EAAD,2BACMC,GADN,IAEE/B,GAAIyC,EAAKzC,GACTS,QAASgC,EAAKhC,QACdwB,QAASO,KAMb,eAAC,EAAD,WACE,qBAAKpF,IAAKqF,EAAKrC,OAAQ9C,IAAKmF,EAAKpC,OACjC,cAAC,GAAD,UAAWoC,EAAKpC,OAChB,+BAAOC,IAAOmC,EAAKlC,SAASC,YAC5B,cAAC,GAAD,UAAciC,EAAKhC,UACnB,eAAC0B,GAAD,WACE,cAACC,GAAD,CAAY7C,QAASiD,EAArB,4FACA,cAAC,IAAD,CAAM9E,GAAG,IAAIsC,GAAIyC,EAAKzC,GAAIT,QAASqD,EAAnC,8DCnGR,IAAMhF,GAAOX,IAAOO,IAAV,6XAmBK,SAASqF,KACtB,OACE,cAAC,GAAD,UACE,cAAC,IAAD,CAAMnF,GAAG,IAAT,uECJSoF,OAff,WACE,OACE,cAAC,IAAD,UACE,qBAAKzB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0B,KAAK,OAAOC,UAAWpC,IAC9B,cAAC,IAAD,CAAOmC,KAAK,aAAaC,UAAWX,KACpC,cAAC,IAAD,CAAOU,KAAK,IAAIE,OAAK,EAACD,UAAW/E,IACjC,cAAC,IAAD,CAAO8E,KAAK,IAAIE,OAAK,EAACD,UAAWH,aCH5BK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.a8ee59eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Loading_icon.1a32f552.gif\";","import React from 'react'\nimport styled from 'styled-components'\nimport spinner from './Loading_icon.gif'\n\nconst Spinner = styled.img`\n  width: 100px;\n  height: 100px;\n`\n\nexport default function ShowSpinner() {\n  return <Spinner src={spinner} alt=\"Loading\"></Spinner>\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Element = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  background-color: white;\n  padding: 10px;\n  margin-bottom: 30px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n\n  a {\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: white;\n    background-color: #7171ff;\n    text-decoration: none;\n  }\n`\n\nexport default function CreatePost() {\n  return (\n    <Element>\n      <Link to=\"/new\">Создать Пост</Link>\n    </Element>\n  )\n}\n","import React from 'react'\nimport ShowSpinner from '../ShowSpinner/ShowSpinner'\nimport useJsonFetch from '../../hooks/useJsonFetch'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport CreatePost from '../CreatePost/CreatePost'\nimport { Link } from 'react-router-dom'\n\nconst Element = styled.ul`\n  a {\n    display: block;\n    text-decoration: none;\n    color: inherit;\n  }\n\n  a:not(:first-child) {\n    margin-top: 15px;\n  }\n`\nconst Post = styled.li`\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  background-color: white;\n\n  :not(:first-child) {\n    margin-top: 15px;\n  }\n\n  img {\n    height: 40px;\n  }\n`\nconst PostName = styled.div`\n  color: blue;\n`\nconst PostContent = styled.p`\n  white-space: pre-wrap;\n  font-weight: bold;\n\n  ::before {\n    content: '';\n    display: block;\n    width: 95%;\n    height: 2px;\n    margin: 10px auto;\n    background-color: #808080;\n  }\n`\n\nexport default function Main() {\n  const [loading, error, data] = useJsonFetch(process.env.REACT_APP_URL_POSTS)\n\n  const onClick = (event) => {\n    localStorage.setItem('selectedPost', event.target.closest('a').dataset.data)\n  }\n\n  return (\n    <div>\n      <CreatePost />\n      {loading && <ShowSpinner />}\n      {error && <div>{error.message}</div>}\n      {data && (\n        <Element>\n          {data.map((data) => (\n            <Link\n              to={`/posts/${data.id}`}\n              key={data.id}\n              data-data={JSON.stringify(data)}\n              onClick={onClick}\n            >\n              <Post>\n                <img src={data.avatar} alt={data.name} />\n                <PostName>{data.name}</PostName>\n                <span>{moment(data.created).fromNow()}</span>\n                <PostContent>{data.content}</PostContent>\n              </Post>\n            </Link>\n          ))}\n        </Element>\n      )}\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nexport default function useJsonFetch(url, options) {\n  const [data, setData] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true)\n      setError('')\n\n      try {\n        const response = await fetch(url, options)\n\n        if (response.status !== 200) {\n          throw new Error(\n            'Network error: ' + response.status + ' - ' + response.statusText\n          )\n        }\n\n        if (response.ok) {\n          const json = await response.json()\n\n          if (!json) {\n            throw new Error('parsing error')\n          }\n          setData(json)\n        }\n      } catch (e) {\n        setError(e)\n        setData('')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    getData()\n  }, [options, url])\n\n  return [loading, error, data]\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Post = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  background-color: white;\n\n  a {\n    align-self: flex-end;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: white;\n    background-color: #7171ff;\n    text-decoration: none;\n  }\n\n  a.close {\n    position: absolute;\n    right: 20px;\n    top: 20px;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: #c0c0c0;\n    background-color: inherit;\n    border-style: none;\n  }\n\n  .empty {\n    border-color: red;\n  }\n`\nconst TextArea = styled.textarea`\n  width: 100%;\n  padding: 15px;\n  padding-right: 40px;\n  font-size: 1.5rem;\n  resize: none;\n  margin-bottom: 15px;\n  border: 1px solid rgb(202, 202, 202);\n`\n\nexport default function NewPost() {\n  const textarea = useRef(null)\n\n  const onClick = (event) => {\n    if (!textarea.current.value) {\n      event.preventDefault()\n\n      if (!textarea.current.classList.contains('empty')) {\n        textarea.current.classList.add('empty')\n        return\n      }\n    }\n\n    uploadPost()\n  }\n\n  const uploadPost = async () => {\n    try {\n      const response = await fetch(process.env.REACT_APP_URL_POSTS, {\n        method: 'POST',\n        'Content-Type': 'application/json',\n        body: JSON.stringify({ id: 0, content: textarea.current.value }),\n      })\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    textarea.current.focus()\n  }, [])\n\n  return (\n    <Post>\n      <Link to=\"/\" className=\"close\">\n        X\n      </Link>\n      <TextArea ref={textarea} rows=\"10\"></TextArea>\n      <Link to=\"/\" onClick={onClick}>\n        Опубликовать\n      </Link>\n    </Post>\n  )\n}\n","import React, { useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Post = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  background-color: white;\n\n  a {\n    align-self: flex-end;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: white;\n    background-color: #7171ff;\n    text-decoration: none;\n  }\n\n  a.close {\n    position: absolute;\n    right: 20px;\n    top: 20px;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: #c0c0c0;\n    background-color: inherit;\n    border-style: none;\n  }\n\n  .empty {\n    border-color: red;\n  }\n`\nconst TextArea = styled.textarea`\n  width: 100%;\n  padding: 15px;\n  padding-right: 40px;\n  font-size: 1.5rem;\n  resize: none;\n  margin-bottom: 15px;\n  border: 1px solid rgb(202, 202, 202);\n`\nconst ButtonClose = styled.button`\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  font-size: inherit;\n  padding: 10px;\n  cursor: pointer;\n  color: #c0c0c0;\n  background-color: inherit;\n  border-style: none;\n`\n\nexport default function EditPost(props) {\n  const textarea = useRef(null)\n\n  const [content, setContent] = useState(props.content)\n\n  const onWriteContent = (event) => {\n    setContent(event.target.value)\n  }\n\n  const onClick = (event) => {\n    if (!textarea.current.value) {\n      event.preventDefault()\n\n      if (!textarea.current.classList.contains('empty')) {\n        textarea.current.classList.add('empty')\n        return\n      }\n    }\n\n    uploadPost()\n  }\n\n  const uploadPost = async () => {\n    try {\n      const response = await fetch(process.env.REACT_APP_URL_POSTS, {\n        method: 'POST',\n        'Content-Type': 'application/json',\n        body: JSON.stringify({ id: props.id, content: content }),\n      })\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const onClose = () => {\n    props.onClose()\n  }\n\n  return (\n    <Post>\n      <h3>Редактировать пост</h3>\n      <ButtonClose onClick={onClose}>X</ButtonClose>\n      <TextArea\n        ref={textarea}\n        rows=\"10\"\n        value={content}\n        onChange={onWriteContent}\n      ></TextArea>\n      <Link to=\"/\" onClick={onClick}>\n        Сохранить\n      </Link>\n    </Post>\n  )\n}\n","import moment from 'moment'\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport EditPost from '../EditPost/EditPost'\n\nconst Post = styled.li`\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  background-color: white;\n\n  :not(:first-child) {\n    margin-top: 15px;\n  }\n\n  img {\n    height: 40px;\n  }\n`\nconst Controls = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  a {\n    margin-left: 10px;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: white;\n    background-color: #ff0000;\n    text-decoration: none;\n  }\n`\nconst PostName = styled.div`\n  color: blue;\n`\nconst PostContent = styled.p`\n  white-space: pre-wrap;\n  font-weight: bold;\n\n  ::before {\n    content: '';\n    display: block;\n    width: 95%;\n    height: 2px;\n    margin: 10px auto;\n    background-color: #808080;\n  }\n`\nconst ButtonEdit = styled.button`\n  font-size: inherit;\n  padding: 10px;\n  cursor: pointer;\n  color: white;\n  background-color: #7171ff;\n  text-decoration: none;\n`\n\nexport default function SelectedPost(props) {\n  const [editMode, setEditMode] = useState(false)\n\n  const onToggleEditMode = () => {\n    setEditMode(!editMode)\n  }\n\n  const post = JSON.parse(localStorage.getItem('selectedPost'))\n\n  const onDelete = async (event) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_POSTS}/${event.target.id}`,\n        {\n          method: 'DELETE',\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  if (editMode) {\n    return (\n      <EditPost\n        {...props}\n        id={post.id}\n        content={post.content}\n        onClose={onToggleEditMode}\n      />\n    )\n  }\n\n  return (\n    <Post>\n      <img src={post.avatar} alt={post.name} />\n      <PostName>{post.name}</PostName>\n      <span>{moment(post.created).fromNow()}</span>\n      <PostContent>{post.content}</PostContent>\n      <Controls>\n        <ButtonEdit onClick={onToggleEditMode}>Редактировать</ButtonEdit>\n        <Link to=\"/\" id={post.id} onClick={onDelete}>\n          Удалить\n        </Link>\n      </Controls>\n    </Post>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Post = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  background-color: white;\n\n  a {\n    align-self: center;\n    font-size: inherit;\n    padding: 10px;\n    cursor: pointer;\n    color: white;\n    background-color: #7171ff;\n    text-decoration: none;\n  }\n`\n\nexport default function Page404() {\n  return (\n    <Post>\n      <Link to=\"/\">На Главную</Link>\n    </Post>\n  )\n}\n","import './App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Main from './components/Main/Main'\nimport NewPost from './components/NewPost/NewPost'\nimport SelectedPost from './components/SelectedPost/SelectedPost'\nimport Page404 from './components/Page404/Page404'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/new\" component={NewPost} />\n          <Route path=\"/posts/:id\" component={SelectedPost} />\n          <Route path=\"/\" exact component={Main} />\n          <Route path=\"*\" exact component={Page404} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}